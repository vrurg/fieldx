[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
__FIELDX_TASK__ = "test"
__FIELDX_TOOLCHAINS__ = "1.77 1.78 beta nightly"

[config]
default_to_workspace = false

[tasks.test]
clear = true
description = "Extensive testing"
category = "Test"
dependencies = ["test-default", "test-serde", "test-diagnostics"]

[tasks.test-versions]
description = "TESTING SUPPORTED Rust VERSIONS"
script_runner = "@duckscript"
script = '''
toolchain_list = array %{__FIELDX_TOOLCHAINS__}

for toolchain in ${toolchain_list}
    echo Testing toolchain ${CARGO_MAKE_RUST_CHANNEL} ${toolchain}
    set_env CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN ${toolchain}
    cm_run_task ${__FIELDX_TASK__}
end
'''

[tasks.update-versions]
env = { TRYBUILD = "overwrite", __FIELDX_TASK__ = "test-compilation" }
description = "Updating .stderr for all versions"
run_task = { name = ["test-versions"] }

[tasks.test-default]
description = "Test with only the default features"
toolchain = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}"
category = "Test"
command = "cargo"
args = ["test", "--workspace"]

[tasks.test-serde]
description = "Test with 'serde' feature"
toolchain = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}"
category = "Test"
command = "cargo"
args = ["test", "--workspace", "--features", "serde"]

[tasks.test-diagnostics]
description = "Test with 'diagnostics' feature"
toolchain = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}"
category = "Test"
condition_script = ["""
#!@duckscript
if eq ${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN} "nightly"
    exit 0
end
echo Skipping diagnostics test on a non-nightly toolchain
exit 1
"""]
command = "cargo"
args = ["test", "--workspace", "--features", "diagnostics"]

[tasks.test-compilation]
workspace = true
description = "Run only the compilation test"
script_runner = "@duckscript"
script = '''
echo Skipping compilation test for ${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN} in ${CARGO_MAKE_WORKING_DIRECTORY}
'''

[tasks.depends]
description = "Install necessary dependencies and tools"
script_runner = "@duckscript"
script = '''
echo "Installing dependencies"
exec cargo install cargo-readme
'''

[tasks.doc]
description = "Build documentation"
script_runner = "@duckscript"
script = '''
readme_content = exec --fail-on-error cargo readme -r fieldx --template ../README.tpl
writefile ./README.md ${readme_content.stdout}
'''

[tasks.publish]
description = "Publish on crates.io"
script_runner = "@duckscript"
script = '''
exec --fail-on-error cargo publish -p fieldx_derive_support
exec --fail-on-error cargo publish -p fieldx_derive
exec --fail-on-error cargo publish -p fieldx
'''