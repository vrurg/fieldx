
[env]
    CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
    __FIELDX_DEFAULT_TOOLCHAIN__ = { value = "nightly", condition = { env_not_set = ["__FIELDX_DEFAULT_TOOLCHAIN__"] } }
    __FIELDX_PREV_RELEASE_TESTING__ = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/.release-tested"
    __FIELDX_README_CRATE_ROOT__ = { value = "fieldx", condition = { env_not_set = ["__FIELDX_README_CRATE_ROOT__"] } }
    __FIELDX_RELEASE_NOTES__ = { value = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/release_notes", condition = { env_not_set = [
        "__FIELDX_RELEASE_NOTES__",
    ] } }
    __FIELDX_TASK__ = { value = "test", condition = { env_not_set = ["__FIELDX_TASK__"] } }
    __FIELDX_TOOLCHAINS__ = { value = "nightly stable 1.78", condition = { env_not_set = ["__FIELDX_TOOLCHAINS__"] } }

[config]
    default_to_workspace = false
    reduce_output        = false

[tasks.test]
    category     = "Test"
    clear        = true
    dependencies = ["test-feature-sets"]
    description  = "Extensive testing"
    workspace    = true

[tasks.test-docker]
    category = "Test"
    env      = { __FIELDX_TASK__ = { value = "test", condition = { env_not_set = ["__FIELDX_TASK__"] } } }
    run_task = "dockerize"

[tasks.test-versions]
    dependencies = ["test-versions-docker"]
    description  = "TESTING SUPPORTED Rust VERSIONS"
    run_task     = { name = "post-test-versions" }

[tasks.test-versions-docker]
    run_task = { name = [
        "test-nightly-docker",
        "test-stable-docker",
        "test-1_78-docker",
    ], parallel = true, fork = true }

[tasks.test-nightly-docker]
    description = "Test with nightly toolchain"
    env         = { __FIELDX_DEFAULT_TOOLCHAIN__ = "nightly", __FIELDX_DOCKER_LOG__ = "test-nightly" }
    run_task    = "test-docker"

[tasks.test-stable-docker]
    description = "Test with stable toolchain"
    env         = { __FIELDX_DEFAULT_TOOLCHAIN__ = "stable", __FIELDX_DOCKER_LOG__ = "test-stable" }
    run_task    = "test-docker"

[tasks.test-1_78-docker]
    description = "Test with Rust 1.78 toolchain"
    env         = { __FIELDX_DEFAULT_TOOLCHAIN__ = "1.78", __FIELDX_DOCKER_LOG__ = "test-1_78" }
    run_task    = "test-docker"

[tasks.post-test-versions]
    description = "Post-test-versions task"
    script = '''
# If successfully done then record last commit
print -c bright_green "INFO"
commit = exec git describe HEAD
echo " - Recording ${commit.stdout} as tested for release"
writefile ${__FIELDX_PREV_RELEASE_TESTING__} ${commit.stdout}
'''
    script_runner = "@duckscript"

# If successfully done then record last commit
[tasks.update-versions]
    description = "Updating .stderr for all versions"
    env         = { TRYBUILD = "overwrite", __FIELDX_TASK__ = "test-compilation" }
    run_task    = { name = ["test-versions"] }

[tasks.test-diagnostics]
    args = ["test", "--workspace", "--features", "diagnostics"]
    category = "Test"
    command = "cargo"
    condition_script = ["""
#!@duckscript
if eq ${__FIELDX_DEFAULT_TOOLCHAIN__} "nightly"
    exit 0
end
echo Skipping diagnostics test on a non-nightly toolchain
exit 1
"""]
    description = "Test with 'diagnostics' feature"
    toolchain = "${__FIELDX_DEFAULT_TOOLCHAIN__}"

[tasks.test-compilation]
    description = "Run only the compilation test"
    script = '''
echo Skipping compilation test for ${__FIELDX_DEFAULT_TOOLCHAIN__} in ${CARGO_MAKE_WORKING_DIRECTORY}
'''
    script_runner = "@duckscript"
    workspace = true

[tasks.test-feature-sets]
    description = "Test different feature sets"
    script = '''
echo Skipping test of feature sets for ${__FIELDX_DEFAULT_TOOLCHAIN__} in ${CARGO_MAKE_WORKING_DIRECTORY}
'''
    script_runner = "@duckscript"
    workspace = true

[tasks.depends]
    description = "Install necessary dependencies and tools"
    script = '''
echo "Installing dependencies"
exec cargo install cargo-readme
'''
    script_runner = "@duckscript"

[tasks.docs]
    args        = ["doc", "--workspace", "--features", "async-tokio,sync,serde,clonable-lock", "--no-deps"]
    command     = "cargo"
    description = "Generate documentation"

[tasks.readme]
    description = "Build documentation"
    script = '''
readme_content = exec --fail-on-error cargo readme -r fieldx --template ../README.tpl
writefile ./README.md ${readme_content.stdout}
'''
    script_runner = "@duckscript"

[tasks.changelog]
    clear = true
    description = "Produce CHANGELOG.md"
    script = """
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}

version_out = exec --fail-on-error cargo get package.version --entry ${__FIELDX_README_CRATE_ROOT__} --pretty
version = trim ${version_out.stdout}
if is_empty ${version}
    stderr = set ""
    if not is_empty ${version_out.stderr}
        stderr = set "\\n${version_out.stderr}"
    end
    assert_error "Can't find out ${__FIELDX_README_CRATE_ROOT__} version.${stderr}"
end

if is_path_exists ${__FIELDX_RELEASE_NOTES__}
    release_notes = readfile ${__FIELDX_RELEASE_NOTES__}
    exec --fail-on-error git cliff -o CHANGELOG.md --tag ${version} --with-tag-message "${release_notes}"
else
    exec --fail-on-error git cliff -o CHANGELOG.md --tag ${version}
end
"""
    script_runner = "@duckscript"

[tasks.is-clean]
    category = "Check"
    description = "Repository is clean"
    script = '''
is_clean = exec git diff-index --exit-code --stat HEAD
if not eq ${is_clean.code} 0
    print -bgc red -c yellow "!!!"
    println -c bright_red " Repository is not clean."
    echo ${is_clean.stdout}
    exit 1
end
'''
    script_runner = "@duckscript"

[tasks.release-testing]
    clear = true
    condition = { fail_message = "No release testing is needed, has been done for this commit already" }
    condition_script = ['''
if is_path_exists ${__FIELDX_PREV_RELEASE_TESTING__}
    prev = readfile ${__FIELDX_PREV_RELEASE_TESTING__}
    prev = trim ${prev}
    out = exec git describe HEAD
    now = trim ${out.stdout}
    if eq ${prev} ${now}
        exit 1
    end
end
''']
    run_task = "test-versions"
    script_runner = "@duckscript"

[tasks.mdbook-serve]
    args    = ["serve", "--open"]
    command = "mdbook"
    cwd     = "./fieldx/docs"

[tasks.mdbook-doc-from-example]
    args    = ["-c", "./doc_sample.sh"]
    command = "/bin/sh"
    cwd     = "./fieldx/docs"
    watch   = { watch = ["./fieldx/examples/book_doc.rs", "./fieldx/docs/doc_sample.sh"] }

[tasks.book-serve]
    description = "Execute `mdbook serve`"
    run_task    = { name = ["mdbook-serve", "mdbook-doc-from-example"], fork = true, parallel = true }

[tasks.version-patch-bump]
    clear = true
    cwd = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
    description = "Bump release version"
    script = '''
!include_files makefile.ds

exec pwd
reply = ask_user "Do you want to bump release version patch?"
reply = lowercase ${reply}
if eq ${reply} "y"
    exec --fail-on-error cargo release version patch
    reply = ask_user "Does this look good for you?"
    reply = lowercase ${reply}
    if eq ${reply} "y"
        echo "Bumping the patch."
        exec --fail-on-error cargo release version patch --execute --no-confirm
        exec --fail-on-error git add Cargo.toml */Cargo.toml
        exec --fail-on-error git commit -m "minor: version bump"
    end
end
'''
    script_runner = "@duckscript"

[tasks.post-doc]
    description = "Post-doc commit"
    script = '''
exec --fail-on-error git add README.md CHANGELOG.md
diffed = exec git diff-index --exit-code --cached HEAD
if not eq ${diffed.code} 0
    echo "Docs need committing."
    exec --fail-on-error git commit -m "minor: Pre-release docs update"
    exec --fail-on-error git push
end
'''
    script_runner = "@duckscript"

[tasks.pre-release]
    clear        = true
    dependencies = ["is-clean", "release-testing", "version-patch-bump", "readme", "changelog", "post-doc"]
    description  = "Pre-release tasks"

[tasks.publish]
    clear = true
    dependencies = ["pre-release"]
    description = "Publish on crates.io"
    script = '''
!include_files makefile.ds

dry_run_msg = ""

if ${DRY_RUN}
    dry_run_msg = "(dry run)"
end

reply = ask_user "Do you want to publish the crates? ${dry_run_msg}"
reply = lowercase ${reply}

if eq ${reply} "y"
    if ${DRY_RUN}
        exec --fail-on-error cargo release --no-confirm
    else
        exec --fail-on-error cargo release -x --no-confirm
    end

    # Only now when we finished publishing we can remove the release notes file
    if is_path_exists ${__FIELDX_RELEASE_NOTES__}
        rm ${__FIELDX_RELEASE_NOTES__}
    end
else
    echo "Won't publish."
end
'''
    script_runner = "@duckscript"

[tasks.beta]
    args        = ["release", "beta", "-x", "--no-publish"]
    command     = "cargo"
    description = "Bump beta version"

[tasks.dockerize]
    description = "Run the task ${__FIELDX_TASK__} in a docker container with toolchain ${__FIELDX_DEFAULT_TOOLCHAIN__}"
    script = '''
if is_empty ${__FIELDX_TASK__}
    echo "Containerized task name is not set, __FIELDX_TASK__ is required"
    exit 1
end

docker_volume = set "fieldx-rustup-data"
temp_env = set "./docker/${__FIELDX_TASK__}-${__FIELDX_DEFAULT_TOOLCHAIN__}.env"

writefile ${temp_env} "__FIELDX_MAKEFILE__=${makefile}\n__FIELDX_MAKE_PROFILE__=${CARGO_MAKE_PROFILE}\n"
exec --fail-on-error sh -c "env | grep -E '^(CARGO_MAKE_|__FIELDX_|TRYBUILD)' >> ${temp_env}"

exit_code = set 0

if is_empty ${__FIELDX_DOCKER_LOG__}
    exit_code = exec --get-exit-code docker compose -f ./docker/compose.yml up --build --no-log-prefix --exit-code-from fieldx-make
else
    exit_code = exec --get-exit-code sh -c "docker compose -f ./docker/compose.yml up --build --no-log-prefix --exit-code-from fieldx-make >./docker/${__FIELDX_DOCKER_LOG__}.log 2>&1"
end

if not eq ${exit_code} 0
    print -s bold -c bright_red "FAIL"
    echo " - Task '${__FIELDX_TASK__}' with toolchain ${__FIELDX_DEFAULT_TOOLCHAIN__} failed; exit code ${exit_code}"
    exit ${exit_code}
end

exit_code = exec --get-exit-code docker compose -f ./docker/compose.yml down

if not eq ${exit_code} 0
    print -s bold -c bright_red "FAIL"
    echo " - Failed to `compose down` the docker container for task '${__FIELDX_TASK__}' with toolchain '${__FIELDX_DEFAULT_TOOLCHAIN__}'; exit code ${exit_code}"
    exit ${exit_code}
end

rm -f ${temp_env}

print -s bold -c bright_green "OK"
echo " - Dockerized task '${__FIELDX_TASK__}' with toolchain ${__FIELDX_DEFAULT_TOOLCHAIN__} completed."
'''
    script_runner = "@duckscript"
