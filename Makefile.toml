[env]
    CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
    __FIELDX_DEFAULT_TOOLCHAIN__         = { value = "nightly", condition = { env_not_set = ["__FIELDX_DEFAULT_TOOLCHAIN__"] } }
    __FIELDX_TASK__                      = { value = "test", condition = { env_not_set = ["__FIELDX_TASK__"] } }
    __FIELDX_TOOLCHAINS__                = "1.77 stable nightly"
    __PREV_RELEASE_TESTING__             = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/.release-tested"

[config]
    default_to_workspace = false

[tasks.init]
    args    = ["-f", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/Cargo.lock"]
    command = "rm"

[tasks.end]
    args    = ["-f", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/Cargo.lock"]
    command = "rm"

[tasks.test]
    category     = "Test"
    clear        = true
    dependencies = ["test-default", "test-feature-sets"]
    description  = "Extensive testing"
    workspace    = true

[tasks.test-versions]
    description = "TESTING SUPPORTED Rust VERSIONS"
    script = '''
toolchain_list = array %{__FIELDX_TOOLCHAINS__}

set_env RUSTFLAGS "-D warnings"

for toolchain in ${toolchain_list}
    echo "Testing toolchain '${toolchain}'"
    set_env __FIELDX_DEFAULT_TOOLCHAIN__ ${toolchain}
    echo Removing ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/Cargo.lock
    rm -f ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/Cargo.lock
    cm_run_task ${__FIELDX_TASK__}
end

# If successfully done then record last commit
commit = exec git describe HEAD
writefile ${__PREV_RELEASE_TESTING__} ${commit.stdout}
'''
    script_runner = "@duckscript"

[tasks.update-versions]
    description = "Updating .stderr for all versions"
    env         = { TRYBUILD = "overwrite", __FIELDX_TASK__ = "test-compilation" }
    run_task    = { name = ["test-versions"] }

[tasks.test-default]
    args        = ["test", "--workspace"]
    category    = "Test"
    command     = "cargo"
    description = "Test with only the default features"
    toolchain   = "${__FIELDX_DEFAULT_TOOLCHAIN__}"

[tasks.test-diagnostics]
    args = ["test", "--workspace", "--features", "diagnostics"]
    category = "Test"
    command = "cargo"
    condition_script = ["""
#!@duckscript
if eq ${__FIELDX_DEFAULT_TOOLCHAIN__} "nightly"
    exit 0
end
echo Skipping diagnostics test on a non-nightly toolchain
exit 1
"""]
    description = "Test with 'diagnostics' feature"
    toolchain = "${__FIELDX_DEFAULT_TOOLCHAIN__}"

[tasks.test-compilation]
    description = "Run only the compilation test"
    script = '''
echo Skipping compilation test for ${__FIELDX_DEFAULT_TOOLCHAIN__} in ${CARGO_MAKE_WORKING_DIRECTORY}
'''
    script_runner = "@duckscript"
    workspace = true

[tasks.test-feature-sets]
    description = "Test different feature sets"
    script = '''
echo Skipping test of feature sets for ${__FIELDX_DEFAULT_TOOLCHAIN__} in ${CARGO_MAKE_WORKING_DIRECTORY}
'''
    script_runner = "@duckscript"
    workspace = true

[tasks.depends]
    description = "Install necessary dependencies and tools"
    script = '''
echo "Installing dependencies"
exec cargo install cargo-readme
'''
    script_runner = "@duckscript"

[tasks.docs]
    args        = ["doc", "--workspace", "--all-features", "--no-deps", "--exclude", "fieldx_derive_support"]
    command     = "cargo"
    description = "Generate documentation"

[tasks.readme]
    description = "Build documentation"
    script = '''
readme_content = exec --fail-on-error cargo readme -r fieldx --template ../README.tpl
writefile ./README.md ${readme_content.stdout}
'''
    script_runner = "@duckscript"

[tasks.changelog]
    clear = true
    description = "Produce CHANGELOG.md"
    script = """
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
exec --fail-on-error git cliff -o CHANGELOG.md --tag ${CARGO_RELEASE_VERSION}
"""
    script_runner = "@duckscript"

[tasks.is-clean]
    category = "Check"
    description = "Repository is clean"
    script = '''
is_clean = exec git diff-index --exit-code --stat HEAD
if not eq ${is_clean.code} 0
    print -bgc red -c yellow "!!!"
    println -c bright_red " Repository is not clean."
    echo ${is_clean.stdout}
    exit 1
end
'''
    script_runner = "@duckscript"

[tasks.release-testing]
    clear = true
    condition = { fail_message = "No release testing is needed, has been done for this commit already" }
    condition_script = ['''
if is_path_exists ${__PREV_RELEASE_TESTING__}
    prev = readfile ${__PREV_RELEASE_TESTING__}
    prev = trim ${prev}
    out = exec git describe HEAD
    now = trim ${out.stdout}
    if eq ${prev} ${now}
        exit 1
    end
end
''']
    run_task = "test-versions"
    script_runner = "@duckscript"

[tasks.version-patch-bump]
    clear = true
    cwd = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
    description = "Bump release version"
    script = '''
!include_files makefile.ds

exec pwd
reply = ask_user "Do you want to bump release version patch?"
reply = lowercase ${reply}
if eq ${reply} "y"
    exec --fail-on-error cargo release version patch
    reply = ask_user "Does this look good for you?"
    reply = lowercase ${reply}
    if eq ${reply} "y"
        echo "Bumping the patch."
        exec --fail-on-error cargo release version patch --execute --no-confirm
        exec --fail-on-error git add Cargo.toml fieldx/Cargo.toml fieldx_aux/Cargo.toml fieldx_derive/Cargo.toml fieldx_derive_support/Cargo.toml
        exec --fail-on-error git commit -m "minor: version bump"
    end
end
'''
    script_runner = "@duckscript"

[tasks.post-doc]
    description = "Post-doc commit"
    script = '''
exec --fail-on-error git add README.md CHANGELOG.md
diffed = exec git diff-index --exit-code --cached HEAD
if not eq ${diffed.code} 0
    echo "Docs need committing."
    exec --fail-on-error git commit -m "minor: Pre-release docs update"
    exec --fail-on-error git push
end
'''
    script_runner = "@duckscript"

[tasks.pre-release]
    clear        = true
    dependencies = ["is-clean", "release-testing", "version-patch-bump", "readme", "changelog", "post-doc"]
    description  = "Pre-release tasks"

[tasks.publish]
    clear = true
    dependencies = ["pre-release"]
    description = "Publish on crates.io"
    script = '''
!include_files makefile.ds
reply = ask_user "Do you want to publish the crates?"
reply = lowercase ${reply}

if eq ${reply} "y"
    if ${DRY_RUN}
        exec --fail-on-error cargo release --no-confirm
    else
        exec --fail-on-error cargo release -x --no-confirm
    end
else
    echo "Won't publish."
end
'''
    script_runner = "@duckscript"
