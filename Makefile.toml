[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
__FIELDX_TASK__ = "test"
__FIELDX_TOOLCHAINS__ = "1.77 1.78 beta nightly"

[config]
default_to_workspace = false

[tasks.test]
clear = true
description = "Extensive testing"
category = "Test"
dependencies = ["test-default", "test-serde", "test-diagnostics"]

[tasks.test-versions]
description = "TESTING SUPPORTED Rust VERSIONS"
script_runner = "@duckscript"
script = '''
toolchain_list = array %{__FIELDX_TOOLCHAINS__}

for toolchain in ${toolchain_list}
    echo Testing toolchain ${CARGO_MAKE_RUST_CHANNEL} ${toolchain}
    set_env CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN ${toolchain}
    cm_run_task ${__FIELDX_TASK__}
end
'''

[tasks.update-versions]
env = { TRYBUILD = "overwrite", __FIELDX_TASK__ = "test-compilation" }
description = "Updating .stderr for all versions"
run_task = { name = ["test-versions"] }

[tasks.test-default]
description = "Test with only the default features"
toolchain = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}"
category = "Test"
command = "cargo"
args = ["test", "--workspace"]

[tasks.test-serde]
description = "Test with 'serde' feature"
toolchain = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}"
category = "Test"
command = "cargo"
args = ["test", "--workspace", "--features", "serde"]

[tasks.test-diagnostics]
description = "Test with 'diagnostics' feature"
toolchain = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}"
category = "Test"
condition_script = ["""
#!@duckscript
if eq ${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN} "nightly"
    exit 0
end
echo Skipping diagnostics test on a non-nightly toolchain
exit 1
"""]
command = "cargo"
args = ["test", "--workspace", "--features", "diagnostics"]

[tasks.test-compilation]
workspace = true
description = "Run only the compilation test"
script_runner = "@duckscript"
script = '''
echo Skipping compilation test for ${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN} in ${CARGO_MAKE_WORKING_DIRECTORY}
'''

[tasks.depends]
description = "Install necessary dependencies and tools"
script_runner = "@duckscript"
script = '''
echo "Installing dependencies"
exec cargo install cargo-readme
'''

[tasks.doc]
description = "Build documentation"
script_runner = "@duckscript"
script = '''
readme_content = exec --fail-on-error cargo readme -r fieldx --template ../README.tpl
writefile ./README.md ${readme_content.stdout}
'''

[tasks.tag-release]
clear = true
description = "Put Git tag on the commit."
script_runner = "@duckscript"
script = '''
print -bgc red -c black " ► "
print -bgc black -c white " Do you want to tag as v${CARGO_MAKE_PROJECT_VERSION}? "
print -s bold "(y/N)"
echo " "
reply = read
reply = lowercase ${reply}
if eq ${reply} "y"
    rc = exec git tag v${CARGO_MAKE_PROJECT_VERSION}
    if ${rc.code}
        println -c red "The tag is already set!"
        print "Force set? "
        print -s bold "(y/N)"
        echo " "
        reply = read
        reply = lowercase ${reply}
        if eq ${reply} "y"
            exec --fail-on-error git tag -f v${CARGO_MAKE_PROJECT_VERSION}
        else
            exit 1
        end
    end
else
    echo "Won't tag."
    exit 1
end
'''

[tasks.check-git-status]
clear = true
description = "Check if the repo is clean"
script_runner = "@duckscript"
script = '''
rc = exec git diff-index --quiet HEAD
if ${rc.code}
    print -c bright_red "***ERROR***"
    echo " Repository is not clean. Commit your changes first!"
    exit ${rc.code}
end
'''

[tasks.release]
clear = true
description = "Preparing the releasse"
dependencies = ["check-git-status", "tag-release", "test-versions"]

[tasks.publish]
clear = true
description = "Publish on crates.io"
dependencies = ["release"]
script_runner = "@duckscript"
script = '''
print -bgc red -c black " ► "
print -bgc black -c white " Do you want to publish the crates? "
print -s bold "(y/N)"
echo " "
reply = read
reply = lowercase ${reply}
if eq ${reply} "y"
    exec --fail-on-error cargo publish -p fieldx_derive_support --all-features
    exec --fail-on-error cargo publish -p fieldx_derive --all-features
    exec --fail-on-error cargo publish -p fieldx --all-features
else
    echo "Won't publish."
end
'''

[tasks.pre-release]
clear = true
description = "Pre-release target for `cargo release`"
dependencies = ["test-versions"]
script_runner = "@duckscript"
script = """
exec --fail-on-error git cliff -o CHANGELOG.md --tag ${CARGO_RELEASE_VERSION}
"""