[env]
    CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
    __FIELDX_DEFAULT_TOOLCHAIN__         = { value = "nightly", condition = { env_not_set = ["__FIELDX_DEFAULT_TOOLCHAIN__"] } }
    __FIELDX_TASK__                      = { value = "test", condition = { env_not_set = ["__FIELDX_TASK__"] } }
    __FIELDX_TOOLCHAINS__                = "1.77 1.78 stable beta nightly"

[config]
    default_to_workspace = false

[tasks.test]
    category    = "Test"
    clear       = true
    description = "Extensive testing"
    #dependencies = ["test-default", "test-serde", "test-diagnostics"]
    dependencies = ["test-default", "test-serde"]

[tasks.test-versions]
    description = "TESTING SUPPORTED Rust VERSIONS"
    script = '''
toolchain_list = array %{__FIELDX_TOOLCHAINS__}

for toolchain in ${toolchain_list}
    echo Testing toolchain '${toolchain}'
    set_env __FIELDX_DEFAULT_TOOLCHAIN__ ${toolchain}
    rm Cargo.lock
    cm_run_task ${__FIELDX_TASK__}
end
'''
    script_runner = "@duckscript"

[tasks.update-versions]
    description = "Updating .stderr for all versions"
    env         = { TRYBUILD = "overwrite", __FIELDX_TASK__ = "test-compilation" }
    run_task    = { name = ["test-versions"] }

[tasks.test-default]
    args        = ["test", "--workspace"]
    category    = "Test"
    command     = "cargo"
    description = "Test with only the default features"
    toolchain   = "${__FIELDX_DEFAULT_TOOLCHAIN__}"

[tasks.test-serde]
    args        = ["test", "--workspace", "--features", "serde"]
    category    = "Test"
    command     = "cargo"
    description = "Test with 'serde' feature"
    toolchain   = "${__FIELDX_DEFAULT_TOOLCHAIN__}"

[tasks.test-diagnostics]
    args = ["test", "--workspace", "--features", "diagnostics"]
    category = "Test"
    command = "cargo"
    condition_script = ["""
#!@duckscript
if eq ${__FIELDX_DEFAULT_TOOLCHAIN__} "nightly"
    exit 0
end
echo Skipping diagnostics test on a non-nightly toolchain
exit 1
"""]
    description = "Test with 'diagnostics' feature"
    toolchain = "${__FIELDX_DEFAULT_TOOLCHAIN__}"

[tasks.test-compilation]
    description = "Run only the compilation test"
    script = '''
echo Skipping compilation test for ${__FIELDX_DEFAULT_TOOLCHAIN__} in ${CARGO_MAKE_WORKING_DIRECTORY}
'''
    script_runner = "@duckscript"
    workspace = true

[tasks.depends]
    description = "Install necessary dependencies and tools"
    script = '''
echo "Installing dependencies"
exec cargo install cargo-readme
'''
    script_runner = "@duckscript"

[tasks.doc]
    description = "Build documentation"
    script = '''
readme_content = exec --fail-on-error cargo readme -r fieldx --template ../README.tpl
writefile ./README.md ${readme_content.stdout}
'''
    script_runner = "@duckscript"

[tasks.changelog]
    clear = true
    description = "Produce CHANGELOG.md"
    script = """
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
exec --fail-on-error git cliff -o CHANGELOG.md --tag ${CARGO_RELEASE_VERSION}
"""
    script_runner = "@duckscript"

[tasks.pre-release]
    clear = true
    dependencies = ["test-versions", "doc", "changelog"]
    description = "Pre-release tasks"
    script = '''
exec --fail-on-error git add README.md CHANGELOG.md
exec --fail-on-error git commit -m 'minor: Pre-release docs update'

print -bgc red -c black " ► "
print -bgc black -c white " Do you want to bump release version patch? "
print -s bold "(y/N)"
echo " "
reply = read
reply = lowercase ${reply}
if eq ${reply} "y"
    exec --fail-on-error cargo release version patch --execute
    exec --fail-on-error git add Cargo.toml fieldx/Cargo.toml fieldx_aux/Cargo.toml fieldx_derive/Cargo.toml fieldx_derive_support/Cargo.toml
    exec --fail-on-error git commit -m "minor: version bump"
end
'''

[tasks.publish]
    clear = true
    dependencies = ["pre-release"]
    description = "Publish on crates.io"
    script = '''
print -bgc red -c black " ► "
print -bgc black -c white " Do you want to publish the crates? "
print -s bold "(y/N)"
echo " "
reply = read
reply = lowercase ${reply}
if eq ${reply} "y"
    exec --fail-on-error cargo release -x --no-confirm
else
    echo "Won't publish."
end
'''
    script_runner = "@duckscript"
