#![doc(html_root_url = "https://docs.rs/fieldx_derive/0.2.0/")]
//! # fieldx_derive
//!
//! The core functionality of `fieldx`. This crate provides a procedural macro that implements code‐generation
//! logic.

mod codegen;
mod util;

// use std::panic::{catch_unwind, set_hook};
use darling::ast;
use darling::FromDeriveInput;
use darling::FromMeta;
use fieldx_core::struct_receiver::args::FXStructArgs;
use fieldx_core::struct_receiver::FXStructReceiver;
use syn::parse_macro_input;
use syn::DeriveInput;

// use rust_format::{Config, Edition, Formatter, RustFmt};
// #[allow(dead_code)]
// fn prettify_tok(item: TokenStream) -> String {
//     let cfg = Config::new_str().edition(Edition::Rust2021);
//     let rustfmt = RustFmt::from_config(cfg);
//     rustfmt.format_str(item.to_string()).unwrap()
// }

/// This macro implements `fieldx` functionality for a `struct` with named fields.
///
/// The macro provides two attributes: `#[fxstruct]` and `#[fieldx]`. The former is referred to as _"struct level"_
/// because it is applied to the struct itself. The latter defines individual field properties and, correspondingly, is
/// referred to as _"field level"_. Both attributes accept a number of arguments, many of which are shared between the two
/// but may have different semantics. In addition, arguments of `#[fxstruct]` are usually responsible for specifying
/// defaults for the corresponding field level arguments.
///
/// <a id="attr_terminology"></a>
/// # Terminology
///
/// As mentioned above, the attributes accept arguments, i.e., for `#[fxstruct(sync, rc)]`, the words `sync` and `rc`
/// are the arguments. In cases where an argument’s semantics can be modified with additional parameters, these are
/// called _sub‑arguments_ in this documentation. For example, `off` in `#[fieldx(get(off))]` is a sub‑argument of
/// the `get` argument. A sub‑argument may also take its own sub‑arguments.
///
/// Arguments and subarguments are classified depending on their syntax and functionality. Here is a list of their
/// types:
///
/// * <a id="keyword_arg"></a> _keyword_ – boolean-like, only accepts `off`: `keyword(off)`
/// * <a id="flag_arg"></a> _flag_ – similar to the _keyword_ above but takes no arguments; as a matter of fact, the `off` above is a _flag_
/// * <a id="helper_arg"></a> _helper_ - introduces functionality that is bound to a [helper method](#helper_methods)
/// * <a id="list_arg"></a> _list_ or _function_ – can take multiple sub-arguments
/// * <a id="meta_arg"></a> _meta_ - can take some syntax constructs
///
/// Field **Type**, that starts each argument description, specifies one of the above types.
///
/// <a id="helper_methods"></a>
/// # Helper Methods
///
/// These implement certain functionality either provided by `fieldx` or required to be provided by the user. For now the
/// only kind of required helpers are lazy builders. Others are generated by this macro.
///
/// For example, a helper argument `get` (_accessor_ helper) will generate a method that returns a field value in one way
/// or another (depending on other arguments of the `fieldx` attribute for the field).
///
/// <a id="sub_args"></a>
/// ## Common Sub-Arguments of Helper Arguments
///
/// Helper arguments share common sub-arguments, which are listed in the following table.
/// If their meaning is unclear, it is recommended that you skip this section and revisit it later.
///
/// | Sub-argument | Struct Level | Field Level |
/// |-|-|-|
/// | **`off`** | (temporarily?) disable helper | disable helper |
/// | a non-empty string literal (**`"foo"`**) | method name prefix, unless stated otherwise | explicit method name (struct level prefix is not used) |
/// | **`attributes_fn(...)`** | default attributes for corresponding kind of helper methods | attributes for field's helper method |
/// |  **`vis(...)`, `private`**; `private` is an alias for `vis()`| default visibility | visibility for field helper  |
/// | **`doc()`** | adds documentation to the generated code | adds documentation to the field helper method |
///
/// For example:
///
/// ```ignore
/// // Note the struct level application
/// #[fxstruct( get( "get_", vis(pub(crate)) ) )]
/// ```
///
/// initiates the generation of accessor methods with names prefixed with `get_` and with specified visibility `pub(crate)`:
///
/// ```ignore
/// let foo = obj.get_foo();
/// ```
///
/// With a field declaration like the following (struct omitted for brevity) the field can be accessed via the name
/// given and only within struct's scope:
///
/// ```ignore
/// // Note the field level application
/// #[fieldx( get( "special_type", private ) )]
/// ty: String,
///
/// // Access somewhere in the code
/// let foo = self.special_type();
/// ```
///
/// <a id="attrs_family"></a>
/// ## `attributes*` Family of Sub-Arguments
///
/// Sometimes it might be necessary to specify additional attributes for various generated syntax elements like methods,
/// or auxiliary structs. Where applicable, this functionality is supported by `attributes*` (sub)arguments. Their
/// syntax is `attributes(<attr1>, <attr2>, ...)` where an `<attr>` looks exactly, as it would in
/// the code but excluding the `#[...]` wrapping.
///
/// For example, `attributes_fn(allow(dead_code), cfg(feature = "myfeature"))` will expand into something like:
///
/// ```ignore
/// #[allow(dead_code)]
/// #[cfg(feature = "myfeature")]
/// ```
///
/// The following members of the family are currently supported: `attributes`, `attributes_fn`, and `attributes_impl`.
/// Which ones are implemented for a particular context is documented below.
///
/// <a id="visibility"></a>
/// ## `vis` Sub-Argument
///
/// **Type**: <a href="#list_arg">function</a>
///
/// Specifies the visibility of the associated code element. The syntax is `vis(<visibility>)`, where `<visibility>`
/// can be one of Rust’s standard visibility qualifiers (such as `pub`, `pub(crate)`, etc.) or omitted entirely. When no
/// argument is provided, the [default visibility](https://doc.rust-lang.org/reference/visibility-and-privacy.html#r-vis.default)
/// is applied — typically private — which can also be explicitly indicated using the `private` sub-argument:
///
/// ```ignore
/// #[fxstruct]
/// struct Foo {
///     #[fieldx(get(private))]
///     foo_priv1: i32,
///     // The same as `foo_priv1` above
///     #[fieldx(get(vis()))]
///     foo_priv2: i32,
///     #[fieldx(get(pub(in Bar)))]
///     foo_for_bar: i32,
/// }
/// ```
/// <a id="doc_subarg"></a>
/// ## `doc` Sub-Argument
///
/// **Type**: <a href="#list_arg">function</a>
///
/// Adds documentation to the generated code. The syntax is `doc("line1", "line2", ...)`. Each individual string
/// becomes a separate `#[doc = "line"]` attribute. When the sub-argument list is empty, no documentation is produced
/// for the corresponding item. This behavior makes sense when the documentation is either inherited or has a default.
///
/// Documentation inheritance occurs for fields with associated docs. Depending on how the field is configured, its
/// docs are used for:
///
/// - the corresponding builder setter method
/// - the field accessor method or, if disabled, for the mutable accessor when it is enabled
///
/// Meaningful defaults are provided for the struct's `builder` method as well as for the builder object's `build()` method.
///
/// ```ignore
/// #[fxstruct(
///     builder(
///         doc(
///             "This is the builder for Foo.",
///             "",
///             "Find more info in [this section](crate::)"
///         )
///     ),
///     get, get_mut
/// )]
/// struct Foo {
///     /// This is a field of Foo.
///     foo1: i32,
///     /// This is the builder setter-only documentation for the field.
///     #[fieldx(get(doc()))]
///     foo2: i32,
///     /// This is for the mutable accessor and builder setter.
///     #[fieldx(get(off))]
///     foo3: i32,
///     #[fieldx(get_mut(doc("This is a mutable accessor for `Foo.foo4`.")))]
///     foo4: i32,
/// }
/// ```
///
/// **Note** that helper arguments at the struct level do not have a `doc` sub-argument. They are intended to provide
/// defaults, and it barely makes sense to have the same documentation text for, say, all getters.
///
/// # Struct Level Arguments
///
/// ## **`attributes`**
///
/// **Type**: <a href="#list_arg">list</a>
///
/// Fallback [attributes](#attrs_family) for structs produced by the `builder` and `serde` arguments. I.e. when
/// [`builder`](#builder_struct) or [`serde`](#serde_struct) are requested but don't have their own `attributes`
/// then this one will be used.
///
/// ## **`attributes_impl`**
///
/// **Type**: <a href="#list_arg">list</a>
///
/// [Attributes](#attrs_family) to be applied to the struct implementation.
///
/// ## **`sync`**
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// Declare a struct as thread-safe by default.
///
/// ## **`r#async`***
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// Declare a struct as async by default.
///
/// *Note:* Since `async` is a keyword, syn does not allow using it as-is; only the `r#` prefix is permitted according to Rust syntax.
///
/// ## **`mode`**
///
/// **Type**: <a href="#list_arg">function</a>
///
/// This is another way to specify the default concurrency mode for struct. It takes one of three keywords as arguments:
///
/// - `sync`
/// - `async`
/// - `plain`
///
/// Note that contrary to the direct keyword way, `async` doesn't require the `r#` prefix: `mode(async)`.
///
/// Also, there is no `plain` keyword, but one can use it with `mode` as an explicit marker.
///
/// ## **`lazy`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Enables lazy mode for all fields except those marked with `lazy(off)`.
///
/// **Note:** Using this attribute automatically enables the [`get`](#get) functionality. This is because
/// lazy initialization is typically initiated by the accessor method, so it makes little sense to have lazy
/// fields without accessors.
///
/// ## **`fallible`**
///
/// **Type**: <a href="#list_arg">function</a>
///
/// Enable fallible lazy builders, i.e. expects them to return [`Result`] enum. Takes two sub-arguments:
///
/// - `off` - disables fallible functionality
/// - `error(ErrorType)` – set the expected error, returned by builder.
///
/// `fallible(off, error(MyError))` simply sets default error type for all fallible lazy fields.
///
/// ## ***inner_mut***
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// Turns on interior mutability for struct fields by default.
///
/// <a id="builder_struct"></a>
/// ## **`builder`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Enables builder functionality by introducing a `builder()` associated function and builder type:
///
/// ```
/// # use fieldx::fxstruct;
/// #[fxstruct(builder, get)]
/// struct Foo {
///     description: String,
/// }
/// # fn main() -> Result<(), Box<dyn std::error::Error>> {
/// let obj = Foo::builder()
///                .description(String::from("some description"))
///                .build()?;
/// assert_eq!(obj.description(), "some description");
/// # Ok(())
/// # }
/// ```
///
/// A literal string sub-argument for `builder` defines a common prefix for the builder's setter methods. For example, with
/// `builder("set_")`, one would then use the call `.set_description(...)`.
///
/// [Subarguments](#sub_args):
///
/// - literal string defines builder's struct name. When omitted, the builder struct is named after the original struct
///   by adding `Builder` suffix.
/// - **`prefix`** – a literal string to be used as a prefix for builder setter methods
/// - **`attributes`** (see the [section above](#attrs_family)) – builder struct attributes
/// - **`attributes_impl`** - attributes of the struct implementation
/// - **`into`** – force all builder setter methods to attempt automatic type conversion using `.into()` method
///
///   With `into`, the example above wouldn't need `String::from`, and the call could look like: `.description("some description")`
/// - **`opt_in`** - struct-level only argument; with it only fields with explicit `builder` can be set by builder.
/// - **`init`** - struct-level only argument; specifies identifier of the method to call to finish object initialization.
/// - **`post_build`** - struct-level only; makes builder's `build()` method to call `post_build()` method. If given an
///   ident argument it specifies different method name: `post_build(check_in)`.
///
///   There are a couple of notes to take into account:
///
///   * the method is called on freshly created object right before it is returned back to builder caller
///   * it must take and return `self`: `fn post_build(mut self) { self.foo = "bar"; self }`
///   * for reference-counted structs the method is invoked before they're wrapped into corresponding container;
///     this allows for `mut self` and direct access to the fields without use of inner mutability
/// - **`error(ErrorType)`** - struct-level only; changes the error type returned by the `build()` method. Together with
///   the `post_build` argument makes the post-build method fallible with the same error type.
/// - **`doc`** - [documentation](#doc_subarg) for the builder struct
/// - **`method_doc`** - [documentation](#doc_subarg) for the `build` method of the builder
///
///   **Note** that the builder code is always producing `FieldXError::UninitializedField` variant. Therefore, to be
///   compatible with it the custom `ErrorType` must implement `From<FieldXError>`.
///
/// <a id="rc"></a>
/// ## **`rc`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// With this argument new instances of the type, produced by the `new` method or by type's builder, will be wrapped
/// into reference counting pointers `Rc` or `Arc`, depending on [`sync`](#sync) or [`async`](#async) status of the
/// type.
///
/// Sub-arguments:
///
/// - a literal string defines the base name for the self-reference methods and field name. The default is `myself`.
///
///   For example:
///
///   ```rust
///   # use fieldx::fxstruct;
///   #[fxstruct(rc("parent"))]
///   struct Parent {
///       #[fieldx(default("config.json".to_string()), get)]
///       cfg_path: String,
///   }
///
///   # #[test]
///   # fn parent_child() {
///       let p = Parent::new();
///       let parent_weak: Weak<Parent> = p.parent_downgrade();
///       // We currently only have a reference in p.
///       assert_eq!(Weak::strong_count(&parent_weak), 1);
///
///       {
///           let p2 = p.parent().unwrap();
///           assert_eq!(p2.cfg_path(), &"config.json".to_string());
///           // Now we have added on in p2
///           assert_eq!(Weak::strong_count(&parent_weak), 2);
///       }
///
///       // p2 is out of scope, so we are back to 1.
///       assert_eq!(Weak::strong_count(&parent_weak), 1);
///   # }
///   ```
///
/// - **`doc(...)`** - [documentation](#doc_subarg) for the reference counting method.
/// - **`off`** temporarily disables reference counting for the struct.
///
/// ## **`new`**
///
/// **Type**: <a href="#keyword_arg">helper</a>
///
/// Coordinates the generation of the `new` method for the struct. This is a struct-level only argument.
///
/// The `new` constructor is generated by default; therefore, using `new` as a keyword serves primarily for
/// self-documentation purposes. As a helper, it allows you to disable the constructor generation altogether with
/// `new(off)`, or specify a different name for the constructor with `new("constructor_name")`. The name is also changed
/// to `__fieldx_new` if a private visibility is set.
///
/// ## **`no_new`**
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// _**Deprecated**. Use [`new(off)`](#new) instead._
///
/// Disable generation of method `new`. This is useful for cases when a user wants their own `new` method.
///
/// With this option the macro may avoid generating `Default` implementation for the struct. More details in [a section
/// below](#about_default).
///
/// ## **`default`**
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// Forces the `Default` implementation to be generated for the struct.
///
/// ## **`get`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Enables or disables getter methods for all fields, unless a field is marked otherwise.
///
/// Additionally to the standard helper arguments accessors can also be configured as:
///
/// - **`clone`** – returns a clone of the field value (the field type must implement [`Clone`]).
/// - **`copy`** – returns a copy of the field value (the field type must implement [`Copy`]).
/// - **`as_ref`** – only applicable if the field value is optional; it forces the accessor to have an `Option<&T>`
///   return type instead of `&Option<T>`.
///
/// ## **`get_mut`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Request for a mutable accessor. Since neither of additional options of `get` are applicable here[^no_copy_for_mut]
/// only basic [helper sub-arguments](#sub_args) are accepted.
///
/// Mutable accessors have the same name, as immutable ones, but with `_mut` suffix, unless given explicit name by the
/// user:
///
/// ```
/// # use fieldx::fxstruct;
/// #[fxstruct(get, get_mut)]
/// struct Foo {
///     description: String,
/// }
/// # fn main() {
/// let mut obj = Foo::new();
/// *obj.description_mut() = "some description".to_string();
/// assert_eq!(obj.description(), "some description");
/// # }
/// ```
///
/// [^no_copy_for_mut]: What sense is there in having a mutable copy if you already own it?
///
/// ## **`set`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Request for setter methods. If a literal string sub-argument is supplied it is used as setter method prefix instead
/// of the default `set_`.
///
/// Takes an additional sub-argument:
///
/// - **`into`**: use the [`Into`] trait to automatically convert a value into the field type
///
/// ```
/// # use fieldx::fxstruct;
/// #[fxstruct(set(into), get)]
/// struct Foo {
///     description: String,
/// }
/// # fn main() {
/// let mut obj = Foo::new();
/// obj.set_description("some description");
/// assert_eq!(obj.description(), &"some description".to_string());
/// # }
/// ```
///
/// <a id="reader_writer_helpers"></a>
/// ## **`reader`**, **`writer`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Only meaningful for `sync` structs. Request for reader and writer methods that would return either read-only or
/// read-write lock guards.
///
/// Akin to setters, method names are formed using `read_` and `write_` prefixes, correspondingly, prepended to the
/// field name.
///
/// ```
/// # use fieldx::fxstruct;
/// # fn main() {
/// #[fxstruct(sync, reader, writer)]
/// struct Foo {
///     description: String,
/// }
/// let obj = Foo::new();
/// {
///     let mut wguard = obj.write_description();
///     *wguard = String::from("let's use something different");
/// }
/// {
///     let rguard = obj.read_description();
///     assert_eq!(*rguard, "let's use something different".to_string());
/// }
/// # }
/// ```
///
/// See [the section about differences between `get`/`get_mut` and `reader`/`writer`](#accessor_vs_reader_writer)
///
/// ## **`lock`**
///
/// **Type**: <a href="#flag_arg">flag</a>
///
/// Forces lock-wrapping of all fields by default. Can be explicitly disabled with `lock(off)`. Identical to the
/// `reader`/`writer` arguments but without installing any methods.
///
/// ## **`clearer`** and **`predicate`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// These two are tightly coupled by their meaning, though can be used separately.
///
/// Predicate helper methods return [`bool`] and are the way to find out if a field is set. They're universal in the way
/// that no matter wether a field is sync, or plain, or lazy, or just optional – you always use the same method.
///
/// Clearer helpers are the way to reset a field into uninitialized state. For optional fields it would simply mean it
/// will contain [`None`]. A lazy field would be re-initialized the next time it is read from.
///
/// Clearers return the current field value. If field is already uninitialized (or never has been yet) `None` will be
/// given back.
///
/// Using either of the two automatically make fields optional unless lazy.
///
/// Check out the [example](#optional_example) in the [Optional Fields](#optional_fields) section.
///
/// ## **`optional`**
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// Explicitly make all fields optional. Useful when neither predicate nor clearer helpers are needed.
///
/// ## **`vis(...)`**, **`private`**
///
/// Specify defaults for helpers. See [the sub-arguments section](#sub_args) above for more details.
///
/// ## **`clone`**, **`copy`**
///
/// Specify defaults for accessor helpers.
///
/// <a id="serde_struct"></a>
/// ## **`serde`**
///
/// **Type**: <a href="#list_arg">function</a>
///
/// Enabled with `serde` feature, which is off by default.
///
/// Support for de/serialization will be discussed in more details in a section below. What is important to know at this
/// point is that due to use of container types direct serialization of a struct is hardly possible. Therefore `fieldx`
/// utilizes `serde`'s `into` and `from` by creating a special shadow struct. The shadow, by default, is named after the
/// original by prepending the name with double underscore and appending *Shadow* suffix: `__FooShadow`.
///
/// The following sub-arguments are supported:
///
/// - a string literal is used to as alternative name for serialization (see `rename` below)
/// - **`off`** disables de/serialization support altogether
/// - **`attributes(...)`** - custom [attributes](#attrs_family) to be applied to the shadow struct
/// - **`vis(...)`**, **`private`** – specify [visibility](#visibility) of the shadow struct
/// - **`serialize`** - enable or disable (`serialize(off)`) serialization support for the struct
/// - **`deserialize`** - enable or disable (`deserialize(off)`) deserialization support for the struct
/// - **`default`** - whether `serde` must use defaults for missing fields and, perhaps, where to take the defaults from
/// - **`forward_attrs`** - a list of field attributes that are to be forwarded to the corresponding field of the shadow
///   struct
/// - **`rename(serialize(...), deserialize(...))`** - defines values for `serde`
///   [`rename`](https://serde.rs/container-attrs.html#rename). Can also be used with a single string literal which
///   would then set both `serialize` and `deserialize` at once.
/// - **`shadow_name(...)`** - its string literal argument specifies a different name for the shadow struct
///
/// #### _Notes about `default`_
///
/// Valid arguments for the sub-argument are:
///
/// * a string literal that has the same meaning as for
///   [the container-level `serde` attribute `default`](https://serde.rs/container-attrs.html#default--path)
/// * a path to a symbol that is bound to an instance of our type: `my_crate::FOO_DEFAULT`
/// * an expression that is valid for use within an attribute.
///
/// The last option is preferable because `fieldx` will parse it and replace any found `Self` reference with the
/// actual structure name. This would simplify structure renaming if it would ever becomes necessary.
///
/// Here is one possible example of using an expression:
///
/// ```
/// # use fieldx::fxstruct;
/// # use serde::{Serialize, Deserialize};
///
/// #[fxstruct(
///     sync, get,
///     serde(
///         shadow_name("BazDup"),
///         // This will be replaced with `Baz::serde_default().into()` and used with the generated code.
///         default( Self::serde_default().into() )
///     )
/// )]
/// #[derive(Clone)]
/// struct Baz {
///     #[fieldx(reader)]
///     f1: String,
///     f2: String,
/// }
///
/// impl Baz {
///     fn serde_default() -> Fubar {
///         Fubar {
///             postfix: "from fubar".into()
///         }
///     }
/// }
///
/// struct Fubar {
///     postfix: String,
/// }
///
/// impl From<Fubar> for BazDup {
///     fn from(value: Fubar) -> Self {
///         Self {
///             f1: format!("f1 {}", value.postfix),
///             f2: format!("f2 {}", value.postfix),
///         }
///     }
/// }
///
/// # fn main() {
/// let json_src = r#"{"f1": "f1 json"}"#;
/// let foo_de = serde_json::from_str::<Baz>(&json_src).expect("Bar deserialization failure");
/// assert_eq!(*foo_de.f1(), "f1 json".to_string());
/// assert_eq!(*foo_de.f2(), "f2 from fubar".to_string());
/// # }
/// ```
///
/// # Field Level Arguments
///
/// At this point, it's worth refreshing your memory about [sub-arguments of helpers](#sub_args) and how they differ in
/// semantics between `fxstruct` and `fieldx` attributes.
///
/// ## **`skip`**
///
/// **Type**: <a href="#flag_arg">flag</a>
///
/// Leave this field alone. The only respected argument of `fieldx` when skipped is the `default`.
///
/// ## **`lazy`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Mark field as lazy.
///
/// **Note:** Same as the [struct-level `lazy`](#lazy) attribute, this enables the [`get`](#get) functionality but for
/// the current field only.
///
/// ## **`fallible`**
///
/// **Type**: <a href="#list_arg">function</a>
///
/// Lets lazy builder method to return an error. For example:
///
/// ```ignore
/// #[fxstruct()]
/// struct Foo {
///     #[fieldx(lazy, fallible(error(MyError)))]
///     connection: Resource,
/// }
///
/// impl Foo {
///     fn build_connection(&self) -> Result<Resource, MyError> {
///         Err(MyError::AdHoc)
///     }
/// }
///
/// let foo = Foo.new();
/// assert!(foo.connection().is_err());
/// ```
///
/// Now, field accessor would be returning `Result<T, MyError>`, where the exact type `T` depends on other field
/// paramters.
///
/// If many struct fields need to be fallible while common error type is used for each one it would make sense to
/// declare the type once for the entire struct:
///
/// ```ignore
/// #[fxstruct( fallible(off, error(MyError)) )]
/// struct Foo {
///     #[fieldx(lazy, fallible)]
///     connection: Resource,
///     #[fieldx(lazy, fallible)]
///     resource_manager: ResourceManager,
/// }
/// ```
///
/// ## **inner_mut***
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// Enables field interior mutability.
///
/// ## **`rename`**
///
/// **Type**: <a href="#list_arg">function</a>
///
/// Specify alternative name for the field. The alternative will be used to form method names and, with `serde` feature
/// enabled, serialization name[^unless_in_serde].
///
/// [^unless_in_serde]: Unless a different alternative name is specified for serialization with `serde` argument.
///
/// ## **`get`**, **`get_mut`**, **`set`**, **`reader`**, **`writer`**, **`clearer`**, **`predicate`**, **`optional`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Have similar syntax and semantics to corresponding `fxstruct` arguments:
///
/// - [`get`](#get)
/// - [`get_mut`](#get_mut)
/// - [`set`](#set)
/// - [`reader` and `writer`](#reader-writer)
/// - [`clearer`](#clearer)
/// - [`predicate`](#predicate)
/// - [`optional`](#optional)
///
/// ## **`optional`**
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// Explicitly mark field as optional even if neither `predicate` nor `clearer` are requested.
///
/// ## **`vis(...)`**, **`private`**
///
/// Field-default visibility for helper methods. See [the sub-arguments section](#sub_args) above.
///
/// ## **`serde`**
///
/// **Type**: <a href="#list_arg">function</a>
///
/// At the field-level this option acts mostly the same way, as [at the struct-level](#serde). With a couple of
/// differences:
///
/// - string literal sub-argument is bypassed into `serde` [field-level `rename`](https://serde.rs/field-attrs.html#rename)
/// - `default` is responsible for field default value; contrary to the struct-level, it doesn't use [`Into`] trait
/// - `attributes` will be applied to the field itself
/// - `serialize`/`deserialize` control field marshalling
///
/// ## **`into`**
///
/// **Type**: <a href="#keyword_arg">keyword</a>
///
/// Sets default for `set` and `builder` arguments.
///
/// ## **`builder`**
///
/// **Type**: <a href="#helper_arg">helper</a>
///
/// Mostly identical to the [struct-level `builder`](#builder). Field specifics are:
///
/// - no `attributes_impl` and `opt_in` (consumed, but ignored)
/// - string literal specifies setter method name of the builder type for this field
/// - `attributes` and `attributes_fn` are correspondingly applies to builder field and builder setter method
///
/// Field level only argument:
///
/// - **`required`** – this field must always get a value from the builder even if otherwise it'd be optional
#[proc_macro_attribute]
pub fn fxstruct(args: proc_macro::TokenStream, input: proc_macro::TokenStream) -> proc_macro::TokenStream {
    let attr_args = match ast::NestedMeta::parse_meta_list(args.into()) {
        Ok(v) => v,
        Err(e) => {
            return darling::Error::from(e).write_errors().into();
        }
    };

    let args = match FXStructArgs::from_list(&attr_args) {
        Ok(v) => v,
        Err(e) => return e.write_errors().into(),
    };

    let input_ast = parse_macro_input!(input as DeriveInput);
    let fx = match FXStructReceiver::from_derive_input(&input_ast) {
        Ok(v) => v,
        Err(e) => return e.write_errors().into(),
    };

    codegen::FXRewriter::new(fx, args).rewrite().into()
}
