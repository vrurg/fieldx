warning: unused import: `Deserialize`
 --> tests/uncompilable_serde/deserialize_off.rs
  |
  | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

error[E0277]: the trait bound `Foo: Deserialize<'_>` is not satisfied
 --> tests/uncompilable_serde/deserialize_off.rs
  |
  |     let _json = serde_json::from_str::<Foo>(r#"{"v": "whatever"}"#);
  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `Foo`
  |
  = help: the following other types implement trait `Deserialize<'de>`:
            &'a Path
            &'a [u8]
            &'a str
            ()
            (T0, T1)
            (T0, T1, T2)
            (T0, T1, T2, T3)
            (T0, T1, T2, T3, T4)
            (T0, T1, T2, T3, T4, T5)
            (T0, T1, T2, T3, T4, T5, T6)
            (T0, T1, T2, T3, T4, T5, T6, T7)
            (T0, T1, T2, T3, T4, T5, T6, T7, T8)
            (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)
            (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
            (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
            (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
            (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
            (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
            (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
            (T0,)
            AtomicBool
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
            AtomicIsize
            AtomicU16
            AtomicU32
            AtomicU64
            AtomicU8
            AtomicUsize
            BTreeMap<K, V>
            BTreeSet<T>
            BinaryHeap<T>
            Bound<T>
            Box<CStr>
            Box<OsStr>
            Box<Path>
            Box<T>
            Box<[T]>
            Box<str>
            CString
            Cell<T>
            Cow<'a, T>
            Duration
            HashMap<K, V, S>
            HashSet<T, S>
            IgnoredAny
            IpAddr
            Ipv4Addr
            Ipv6Addr
            LinkedList<T>
            Mutex<T>
            NonZero<i128>
            NonZero<i16>
            NonZero<i32>
            NonZero<i64>
            NonZero<i8>
            NonZero<isize>
            NonZero<u128>
            NonZero<u16>
            NonZero<u32>
            NonZero<u64>
            NonZero<u8>
            NonZero<usize>
            OsString
            PathBuf
            PhantomData<T>
            RangeFrom<Idx>
            RangeInclusive<Idx>
            RangeTo<Idx>
            RefCell<T>
            Result<T, E>
            Reverse<T>
            RwLock<T>
            Saturating<i128>
            Saturating<i16>
            Saturating<i32>
            Saturating<i64>
            Saturating<i8>
            Saturating<isize>
            Saturating<u128>
            Saturating<u16>
            Saturating<u32>
            Saturating<u64>
            Saturating<u8>
            Saturating<usize>
            SocketAddrV4
            SocketAddrV6
            SystemTime
            Value
            Vec<T>
            VecDeque<T>
            Wrapping<T>
            [T; 0]
            [T; 10]
            [T; 11]
            [T; 12]
            [T; 13]
            [T; 14]
            [T; 15]
            [T; 16]
            [T; 17]
            [T; 18]
            [T; 19]
            [T; 1]
            [T; 20]
            [T; 21]
            [T; 22]
            [T; 23]
            [T; 24]
            [T; 25]
            [T; 26]
            [T; 27]
            [T; 28]
            [T; 29]
            [T; 2]
            [T; 30]
            [T; 31]
            [T; 32]
            [T; 3]
            [T; 4]
            [T; 5]
            [T; 6]
            [T; 7]
            [T; 8]
            [T; 9]
            _::_serde::__private::de::content::Content<'de>
            bool
            char
            f32
            f64
            i128
            i16
            i32
            i64
            i8
            isize
            lock_api::mutex::Mutex<R, T>
            lock_api::remutex::ReentrantMutex<R, G, T>
            lock_api::rwlock::RwLock<R, T>
            serde_json::Map<std::string::String, Value>
            serde_json::Number
            std::net::SocketAddr
            std::ops::Range<Idx>
            std::option::Option<T>
            std::string::String
            u128
            u16
            u32
            u64
            u8
            usize
note: required by a bound in `serde_json::from_str`
 --> $CARGO/serde_json-1.0.117/src/de.rs
  |
  | pub fn from_str<'a, T>(s: &'a str) -> Result<T>
  |        -------- required by a bound in this function
  | where
  |     T: de::Deserialize<'a>,
  |        ^^^^^^^^^^^^^^^^^^^ required by this bound in `from_str`
